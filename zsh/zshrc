source ~/antigen.zsh

antigen use oh-my-zsh

antigen bundle git
antigen bundle fasd
antigen bundle vi-mode
antigen bundle docker
antigen bundle docker-compose

antigen bundle zsh-users/zsh-syntax-highlighting

antigen theme denysdovhan/spaceship-prompt

antigen apply

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'

## put in fasd hooks:
eval "$(fasd --init auto)"


####### Bullet Train #########
BULLETTRAIN_PROMPT_ADD_NEWLINE=false
BULLETTRAIN_STATUS_EXIT_SHOW=true
BULLETTRAIN_CONTEXT_DEFAULT_USER='mjsobrep'
# autoload -Uz vcs_info
# zstyle ':vcs_info:*' enable git
# zstyle ':vcs_info:git*:*' get-revision true
# zstyle ':vcs_info:git*:*' check-for-changes true
# zstyle ':vcs_info:git*' formats "(%s) %12.12i %c%u %b%m"
# zstyle ':vcs_info:git*' actionformats "(%s|%a) %12.12i %c%u %b%m"
# # precmd(){ vcs_info }
# setopt prompt_subst
# BULLETTRAIN_GIT_PROMPT_CMD=\${\$(git_prompt_info)//\\//\ î‚±\ ${vcs_info_msg_0_  }
# git diff --cached --name-only | wc -l # the staged files



###### ROS Support ######
if (($(cat /etc/os-release | grep VERSION_ID|grep -o '".*"' | sed 's/"//g' | cut -c1-2 )==16));then
    ROS_VERSION="kinetic"
    OS_VERSION="xenial"
    function ifip { /sbin/ifconfig $1 | grep "inet addr" | awk -F: '{print $2}' |awk '{print $1}'; }
    else
    if (($(cat /etc/os-release | grep VERSION_ID|grep -o '".*"' | sed 's/"//g' | cut -c1-2 )==18)); then
    ROS_VERSION="melodic"
    OS_VERSION="bionic"
    function ifip { ip -4 addr show $1 | grep -oP '(?<=inet\s)\d+(\.\d+){3}' }
fi
fi


function connect_to_robot {
    echo "setting up for $1"
    echo "using ros version: $ROS_VERSION"
    echo "on OS: $OS_VERSION"
    source /opt/ros/${ROS_VERSION}/setup.zsh
    source ~/catkin_ws/devel/setup.zsh

    case $(hostname) in
        linPower)
            echo "recognized device Lin Power"
            export ROS_IP=`ifip enp0s31f6`;;
        x220t)
            echo "recognized device x220t"
            export ROS_IP=`ifip wlp3s0`;;
        mjs-mws)
            echo "recognized device MJS-MWS"
            export ROS_IP=`ifip enx98e743e78ee0 || ifip wlp59s0`;;
        *)
            echo "unknown system";
    esac
    # Handle the device not existing and getting something empty:
    [  -z "$ROS_IP" ] && (echo "ROS_IP unset, setting on loopback"; export ROS_IP=`ifip lo`)

    # takes a single number arg representing the robot
    if [ "$1" = "flo" ]
    then
        export ROS_MASTER_URI=http://flo-nuc:11311
        echo "added nuc as master uri"
    elif [ "$1" = "mantaro" ]
    then
        export ROS_MASTER_URI=http://192.168.1.20:11311
        echo "added mantaro robot as master uri"
    elif [ "$1" = "x220" ]
    then
        export ROS_MASTER_URI=http://192.168.1.20:11311
        echo "added Lenovo X220T as master uri"
    elif (( $1 == 0 ))
    then
        export ROS_MASTER_URI=http://localhost:11311
        echo "connected to local machine"
    elif [ "$1" = "colcon" ]
    then
        export ROS_MASTER_URI=http://localhost:11311
        echo "setup for colcon"
    fi
    echo "set ROS MASTER URI to $ROS_MASTER_URI"
    echo "set ROS IP to $ROS_IP"
    echo "done setting up ros"
}

########## SSH into flo
function ssh-flo {
    ssh nuc-admin@flo-nuc
}


###### Adding Tex to Path #####
# If we used sudo to install:
path+=('/usr/local/texlive/2018/bin/x86_64-linux')
manpath+=('/usr/local/texlive/2018/texmf-dist/doc/man')
infopath+=('/usr/local/texlive/2018/texmf-dist/doc/info')
# If we did a user install (as done in the install script)
read year <<< $(ls /home/$USER/texlive | grep 20)
path+=("/home/$USER/texlive/$year/bin/x86_64-linux")
manpath+=("/home/$USER/texlive/$year/texmf-dist/doc/man")
infopath+=("/home/$USER/texlive/$year/texmf-dist/doc/info")

#### Adding NVR to path ####
path+=('/home/mjsobrep/.local/bin')
export PATH
export MANPATH
export INFOPATH


#### Using system clipboard ####
yanktoclipboard(){
    echo $BUFFER | xsel -i -b
}
pastefromclipboard(){
    RBUFFER=$(xsel -o -b </dev/null)$RBUFFER
}
zle -N yanktoclipboard
zle -N pastefromclipboard
bindkey -a 'yy' yanktoclipboard
bindkey -a 'p' pastefromclipboard


#### Set Text Editor ####
export EDITOR='nvim'
export VISUAL='nvim'

#### Node packages ####
#from: https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md
NPM_PACKAGES="${HOME}/.npm-packages"

export PATH="$NPM_PACKAGES/bin:$PATH"

## Ruby
#export GEM_HOME="$HOME/gems"
#export PATH="$HOME/gems/bin:$PATH"

##### Some GIT setup
git config --global alias.tree "log --color --graph --pretty=format:'%C(#ff69b4)%h%Creset%x09%C(auto)%d%Creset %s %Cgreen(%cr)%C(bold blue) <%an> %Creset' --abbrev-commit --all --decorate"

function gitChildChanges {
 find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo {} && cd {} && git status -s && echo)' \;
}

### NVM ###
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

### common remote targets ###
function ssh-home {
    ssh mjsobrep@192.168.1.6 -X
}

### Ruby ###
# RBENV:
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

### ADB for COZMO ###
path+=()
export PATH="$PATH:/home/mjsobrep/android-sdk-linux/platform-tools/"

### ADD CUDA Drivers ###
CUDA_V=$(ls  /usr/local | grep "cuda-.*")
PATH=/usr/local/${CUDA_V}/bin${PATH:+:${PATH}}; export PATH
LD_LIBRARY_PATH=/usr/local/${CUDA_V}/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}; export LD_LIBRARY_PATH

### Little script for getting aws penn creds
function aws-penn-login {
    prior=$(pwd)
    cd ~/Documents/git/aws-federated-auth
    pipenv run python aws-federated-auth.py
    export AWS_PROFILE=aws-rehab-robotics-flo-seas-acct-PennDataScientist
    cd $prior
}

### pipenv auto complete
_pipenv() {
  eval $(env COMMANDLINE="${words[1,$CURRENT]}" _PIPENV_COMPLETE=complete-zsh pipenv)
}
compdef _pipenv pipenv

### Local zshrc ###
source ~/.zshrc-local

echo 'done loading zshrc'
